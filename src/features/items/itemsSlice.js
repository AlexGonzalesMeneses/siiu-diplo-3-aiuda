import { createSlice } from '@reduxjs/toolkit';
import { ITEMS } from '../../shared/items';

const initialState = {
  items: ITEMS,
  status: 'idle',
  selectItem: {},
};

export const itemsSlice = createSlice({
  name: 'items',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    selectItem: (state, action) => {
      state.selectItem = action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { increment, selectItem } = itemsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.items.value)`
export const selectItems = (state) => state.items.items;

export default itemsSlice.reducer;
